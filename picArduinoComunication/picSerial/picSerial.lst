CCS PCM C Compiler, Version 5.025, 7034               02-jun.-23 13:53

               Filename:   C:\Users\aldoh\Desktop\cecyt\pic16f877\picArduinoComunication\picSerial\picSerial.lst

               ROM used:   200 words (2%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           18 (5%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0A7
0003:  NOP
.................... #include <16F877A.h>   // libería del pic 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... //#include <rs232.h> 
.................... #device ADC=8  // bits de conversión ADC (convertidor analógico digital) 
.................... #use delay(crystal=4000000)   // definimos el crystal 
0004:  MOVLW  27
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
.................... #include <lcd.c>   // incluímos la librería para la lcd 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0069:  MOVLW  0F
006A:  BSF    03.5
006B:  ANDWF  08,W
006C:  IORLW  F0
006D:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
006E:  BCF    03.5
006F:  BSF    08.2
....................    delay_cycles(1); 
0070:  NOP
....................    lcd_output_enable(1); 
0071:  BSF    08.0
....................    delay_cycles(1); 
0072:  NOP
....................    high = lcd_read_nibble(); 
0073:  CALL   025
0074:  MOVF   78,W
0075:  MOVWF  2B
....................        
....................    lcd_output_enable(0); 
0076:  BCF    08.0
....................    delay_cycles(1); 
0077:  NOP
....................    lcd_output_enable(1); 
0078:  BSF    08.0
....................    delay_us(1); 
0079:  NOP
....................    low = lcd_read_nibble(); 
007A:  CALL   025
007B:  MOVF   78,W
007C:  MOVWF  2A
....................        
....................    lcd_output_enable(0); 
007D:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
007E:  MOVLW  0F
007F:  BSF    03.5
0080:  ANDWF  08,W
0081:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0082:  BCF    03.5
0083:  SWAPF  2B,W
0084:  MOVWF  77
0085:  MOVLW  F0
0086:  ANDWF  77,F
0087:  MOVF   77,W
0088:  IORWF  2A,W
0089:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0025:  MOVF   08,W
0026:  MOVWF  77
0027:  SWAPF  08,W
0028:  ANDLW  0F
0029:  MOVWF  78
....................   #endif 
002A:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0019:  SWAPF  2B,W
001A:  ANDLW  F0
001B:  MOVWF  77
001C:  MOVLW  0F
001D:  ANDWF  08,W
001E:  IORWF  77,W
001F:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0020:  NOP
....................    lcd_output_enable(1); 
0021:  BSF    08.0
....................    delay_us(2); 
0022:  GOTO   023
....................    lcd_output_enable(0); 
0023:  BCF    08.0
0024:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0063:  BSF    03.5
0064:  BCF    08.0
....................    lcd_rs_tris(); 
0065:  BCF    08.1
....................    lcd_rw_tris(); 
0066:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0067:  BCF    03.5
0068:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
008A:  MOVF   78,W
008B:  MOVWF  2A
008C:  BTFSC  2A.7
008D:  GOTO   069
....................    lcd_output_rs(address); 
008E:  BTFSS  28.0
008F:  BCF    08.1
0090:  BTFSC  28.0
0091:  BSF    08.1
....................    delay_cycles(1); 
0092:  NOP
....................    lcd_output_rw(0); 
0093:  BCF    08.2
....................    delay_cycles(1); 
0094:  NOP
....................    lcd_output_enable(0); 
0095:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0096:  SWAPF  29,W
0097:  MOVWF  2A
0098:  MOVLW  0F
0099:  ANDWF  2A,F
009A:  MOVF   2A,W
009B:  MOVWF  2B
009C:  CALL   019
....................    lcd_send_nibble(n & 0xf); 
009D:  MOVF   29,W
009E:  ANDLW  0F
009F:  MOVWF  2A
00A0:  MOVWF  2B
00A1:  CALL   019
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
*
002B:  MOVLW  28
002C:  MOVWF  23
002D:  MOVLW  0C
002E:  MOVWF  24
002F:  MOVLW  01
0030:  MOVWF  25
0031:  MOVLW  06
0032:  MOVWF  26
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0033:  BCF    08.0
....................    lcd_output_rs(0); 
0034:  BCF    08.1
....................    lcd_output_rw(0); 
0035:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0036:  MOVLW  0F
0037:  BSF    03.5
0038:  ANDWF  08,W
0039:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
003A:  BCF    08.0
....................    lcd_rs_tris(); 
003B:  BCF    08.1
....................    lcd_rw_tris(); 
003C:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
003D:  MOVLW  0F
003E:  BCF    03.5
003F:  MOVWF  27
0040:  CALL   004
....................    for(i=1;i<=3;++i) 
0041:  MOVLW  01
0042:  MOVWF  22
0043:  MOVF   22,W
0044:  SUBLW  03
0045:  BTFSS  03.0
0046:  GOTO   04F
....................    { 
....................        lcd_send_nibble(3); 
0047:  MOVLW  03
0048:  MOVWF  2B
0049:  CALL   019
....................        delay_ms(5); 
004A:  MOVLW  05
004B:  MOVWF  27
004C:  CALL   004
004D:  INCF   22,F
004E:  GOTO   043
....................    } 
....................     
....................    lcd_send_nibble(2); 
004F:  MOVLW  02
0050:  MOVWF  2B
0051:  CALL   019
....................    delay_ms(5); 
0052:  MOVLW  05
0053:  MOVWF  27
0054:  CALL   004
....................    for(i=0;i<=3;++i) 
0055:  CLRF   22
0056:  MOVF   22,W
0057:  SUBLW  03
0058:  BTFSS  03.0
0059:  GOTO   0A4
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
005A:  MOVLW  23
005B:  ADDWF  22,W
005C:  MOVWF  04
005D:  BCF    03.7
005E:  MOVF   00,W
005F:  MOVWF  27
0060:  CLRF   28
0061:  MOVF   27,W
0062:  MOVWF  29
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
*
00A2:  INCF   22,F
00A3:  GOTO   056
00A4:  BCF    0A.3
00A5:  BCF    0A.4
00A6:  GOTO   0C1 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
....................       address=LCD_LINE_TWO; 
....................    else 
....................       address=0; 
....................       
....................    address+=x-1; 
....................    lcd_send_byte(0,0x80|address); 
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
....................                      delay_ms(2); 
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
....................      #endif 
....................    } 
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #fuses xt,nowdt 
....................  
.................... //comunicación rs232    // c6 tx en pic  c7  receptor   
.................... #use rs232(baud=9600, xmit=PIN_c6,rcv=PIN_c7,stream=PIC,parity=N, bits=8) 
.................... //#use rs232(baud=9600,xmit=PIN_D0,rcv=PIN_D1,stream=PC, parity=N, bits=8) 
.................... #use standard_io(c) 
....................  
.................... void main(){ 
00A7:  MOVF   03,W
00A8:  ANDLW  1F
00A9:  MOVWF  03
00AA:  MOVLW  19
00AB:  BSF    03.5
00AC:  MOVWF  19
00AD:  MOVLW  A6
00AE:  MOVWF  18
00AF:  MOVLW  90
00B0:  BCF    03.5
00B1:  MOVWF  18
00B2:  MOVLW  FF
00B3:  MOVWF  20
00B4:  BSF    03.5
00B5:  BSF    1F.0
00B6:  BSF    1F.1
00B7:  BSF    1F.2
00B8:  BCF    1F.3
00B9:  MOVLW  07
00BA:  MOVWF  1C
00BB:  BCF    03.7
.................... enable_interrupts(INT_RDA); 
00BC:  BSF    0C.5
.................... enable_interrupts(GLOBAL); 
00BD:  MOVLW  C0
00BE:  BCF    03.5
00BF:  IORWF  0B,F
....................  
....................  
.................... //putc('1'); 
....................  //printf("Aldox"); // Escribimos el valor de la variable temperatura (lectura del sensor) 
....................  
.................... lcd_init();    // iniciamos la LCD 
00C0:  GOTO   02B
.................... char c='w'; 
00C1:  MOVLW  77
00C2:  MOVWF  21
....................  fprintf(PIC,"%c",c); 
00C3:  MOVF   21,W
00C4:  BTFSS  0C.4
00C5:  GOTO   0C4
00C6:  MOVWF  19
....................  
....................  
.................... //printf("Aldox"); // Escribimos el valor de la variable temperatura (lectura del sensor) 
....................   
.................... //setup_adc(ADC_CLOCK_DIV_32);// Asignamos el reloj de conversión ADC 
.................... //setup_adc_ports(AN0);            // configuramos el puerto a0  
.................... //set_adc_channel(0);        // Seleccionamos channel 0 como entrada 
....................   
.................... //char x= getc(); 
....................  //printf("Hola"); 
.................... // fprintf(PIC,"%c",c); //Manda el caracter al segundo PIC 
.................... ///delay_ms(100);             // espera 10 microseg 
....................   //lcd_gotoxy(3, 1);                 // ubicamos la posición 3,1 en la lcd para escribir el msj  
....................  // lcd_putc(x); 
.................... //delay_ms(200); 
.................... /*mandar la información al ARDUINO O OTRO PIC */ 
....................   // putc('7'); 
....................  //fprintf(PIC,"%i",123); //Manda el caracter al segundo PIC 
....................  
.................... //fprintf("%i",123); //Manda el caracter al segundo PIC 
....................  
.................... /* 
....................  while(TRUE) {   // LEEMOS LA TEMPERATURA 
....................        lcd_gotoxy(7, 2);           // ubicamos la posición 7,2 en la lcd para escribir el msj 
....................     //printf("Aldox"); // Escribimos el valor de la variable temperatura (lectura del sensor) 
....................     //delay_ms(10);  
....................         
....................  } 
....................  */ 
.................... } 
00C7:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
